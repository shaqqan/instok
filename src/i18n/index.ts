import { Context } from "grammy";
import { DrizzleUserRepository } from "../infrastructure/repositories/DrizzleUserRepository";

export type SupportedLanguage = "en" | "uz" | "ru" | "kaa";

export interface I18nContext extends Context {
    i18n: {
        t: (key: string, params?: Record<string, string | number>) => string;
        getLanguage: () => SupportedLanguage;
        setLanguage: (lang: SupportedLanguage) => void;
    };
}

export class I18nService {
    private static instance: I18nService;
    private translations: Record<SupportedLanguage, Record<string, string>>;
    private defaultLanguage: SupportedLanguage = "en";

    private constructor() {
        this.translations = {
            en: {
                // Instagram messages
                "instagram.processing": "‚è≥ Processing Instagram link...",
                "instagram.invalid_url": "‚ùå Invalid Instagram URL or no media found.",
                "instagram.no_media": "‚ö†Ô∏è No media found for this link.",
                "instagram.error": "‚ùå An error occurred. Please try again later.",
                "instagram.sent_from_db": "üì± Sent from database",
                "instagram.download_error": "‚ùå Media download error. Please try again later.",

                // General messages
                "general.error": "‚ùå An error occurred. Please try again later.",
                "general.processing": "‚è≥ Processing...",

                // Caption suffix
                "caption.suffix": "\n\nüì• Downloaded from @{botUsername}",
                "caption.prefix": "üì∏ {text}",

                // Media types
                "media.photo": "photo",
                "media.video": "video",

                // Success messages
                "success.downloaded": "‚úÖ Media downloaded successfully!",
                "success.sent": "‚úÖ Media sent successfully!",

                // Language messages
                "language.select_language": "üåê Please select your preferred language:",
                "language.language_changed": "‚úÖ Language changed to {language}",
                "language.language_selected": "‚úÖ Language set to {language}",
                "language.invalid_language": "‚ùå Invalid language selection",
                // Start
                "start.welcome": "Hello! Send a video or audio link from TikTok, Likee, YouTube or Instagram, and I'll download it without watermark."
            },
            uz: {
                // Instagram xabarlari
                "instagram.processing": "‚è≥ Instagram havolasi qayta ishlanmoqda...",
                "instagram.invalid_url": "‚ùå Instagram havolasi noto'g'ri yoki media mavjud emas.",
                "instagram.no_media": "‚ö†Ô∏è Ushbu havola uchun media topilmadi.",
                "instagram.error": "‚ùå Xatolik yuz berdi. Keyinroq qayta urinib ko'ring.",
                "instagram.sent_from_db": "üì± Bazadan yuborildi",
                "instagram.download_error": "‚ùå Media yuklab olishda xatolik. Iltimos, keyinroq urinib ko'ring.",

                // Umumiy xabarlar
                "general.error": "‚ùå Xatolik yuz berdi. Iltimos, keyinroq urinib ko'ring.",
                "general.processing": "‚è≥ Qayta ishlanmoqda...",

                // Caption qo'shimchasi
                "caption.suffix": "\n\nüì• @{botUsername} orqali yuklab olingan",
                "caption.prefix": "üì∏ {text}",

                // Media turlari
                "media.photo": "photo",
                "media.video": "video",

                // Muvaffaqiyat xabarlari
                "success.downloaded": "‚úÖ Media muvaffaqiyatli yuklab olindi!",
                "success.sent": "‚úÖ Media muvaffaqiyatli yuborildi!",

                // Language messages
                "language.select_language": "üåê Sizning xavfsiz tilingizni tanlang:",
                "language.language_changed": "‚úÖ Til {language} ga o'zgartirildi",
                "language.language_selected": "‚úÖ Til {language} ga o'rnatildi",
                "language.invalid_language": "‚ùå Noto'g'ri til tanlash",
                // Start
                "start.welcome": "Salom! TikTok, Likee, YouTube yoki Instagram havolasini yuboring, men uni suv belgisiz yuklab beraman."
            },
            ru: {
                // –°–æ–æ–±—â–µ–Ω–∏—è Instagram
                "instagram.processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ Instagram...",
                "instagram.invalid_url": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram –∏–ª–∏ –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                "instagram.no_media": "‚ö†Ô∏è –î–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                "instagram.error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "instagram.sent_from_db": "üì± –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "instagram.download_error": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",

                // –û–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                "general.error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                "general.processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...",

                // –°—É—Ñ—Ñ–∏–∫—Å –ø–æ–¥–ø–∏—Å–∏
                "caption.suffix": "\n\nüì• –°–∫–∞—á–∞–Ω–æ —á–µ—Ä–µ–∑ @{botUsername}",
                "caption.prefix": "üì∏ {text}",

                // –¢–∏–ø—ã –º–µ–¥–∏–∞
                "media.photo": "photo",
                "media.video": "video",

                // –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
                "success.downloaded": "‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!",
                "success.sent": "‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",

                // Language messages
                "language.select_language": "üåê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:",
                "language.language_changed": "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language}",
                "language.language_selected": "‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {language}",
                "language.invalid_language": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞",
                // Start
                "start.welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ –∏–∑ TikTok, Likee, YouTube –∏–ª–∏ Instagram, –∏ —è —Å–∫–∞—á–∞—é –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞."
            },
            kaa: {
                // Instagram xabarlari
                "instagram.processing": "‚è≥ Instagram siltemesi qayta islenbekte...",
                "instagram.invalid_url": "‚ùå Instagram siltemesi nadurƒ±s ya«µasa media tabƒ±lmadƒ±.",
                "instagram.no_media": "‚ö†Ô∏è Bul silteme ushƒ±n media tabƒ±lmadƒ±.",
                "instagram.error": "‚ùå Q√°telik j√∫z berdi. Keyinirek qayta urƒ±nƒ±p k√≥ri≈Ñ.",
                "instagram.sent_from_db": "üì± Bazadan jiberildi",
                "instagram.download_error": "‚ùå Medianƒ± j√∫klep alƒ±wda q√°telik. Iltimas, keyinirek urƒ±nƒ±p k√≥ri≈Ñ.",

                // Ulƒ±wma xabarlar
                "general.error": "‚ùå Q√°telik j√∫z berdi. Iltimas, keyinirek urƒ±nƒ±p k√≥ri≈Ñ.",
                "general.processing": "‚è≥ Qayta islenbekte...",

                // Jazƒ±w«µa qosƒ±msha
                "caption.suffix": "\n\nüì• @{botUsername} arqalƒ± j√∫klep alƒ±ndƒ±",
                "caption.prefix": "üì∏ {text}",

                // Media t√∫rleri
                "media.photo": "foto",
                "media.video": "video",

                // Tabƒ±slƒ± xabarlar
                "success.downloaded": "‚úÖ Media √°wmetli j√∫klep alƒ±ndƒ±!",
                "success.sent": "‚úÖ Media √°wmetli jiberildi!",

                // Til xabarlarƒ±
                "language.select_language": "üåê √ìzi≈Ñizge qolaylƒ± tildi sayla≈Ñ:",
                "language.language_changed": "‚úÖ Til {language} tiline √≥zgertildi",
                "language.language_selected": "‚úÖ Til {language} tiline ornatƒ±ldƒ±",
                "language.invalid_language": "‚ùå Nadurƒ±s til saylandƒ±",

                // Start
                "start.welcome": "S√°lem! TikTok, Likee, YouTube ya«µasa Instagram siltemesin jiberi≈Ñ, men onƒ± suw belgisisiz j√∫klep beremen."
            }
        };
    }

    public static getInstance(): I18nService {
        if (!I18nService.instance) {
            I18nService.instance = new I18nService();
        }
        return I18nService.instance;
    }

    public t(lang: SupportedLanguage, key: string, params?: Record<string, string | number>): string {
        const translation = this.translations[lang]?.[key] || this.translations[this.defaultLanguage][key] || key;

        if (params) {
            return translation.replace(/\{(\w+)\}/g, (match, param) => {
                return params[param]?.toString() || match;
            });
        }

        return translation;
    }

    public getSupportedLanguages(): SupportedLanguage[] {
        return Object.keys(this.translations) as SupportedLanguage[];
    }

    public getDefaultLanguage(): SupportedLanguage {
        return this.defaultLanguage;
    }

    public setDefaultLanguage(lang: SupportedLanguage): void {
        this.defaultLanguage = lang;
    }
}

// Helper function to get user language from context
export async function getUserLanguage(ctx: Context): Promise<SupportedLanguage> {
    const repo = new DrizzleUserRepository();
    const tgId = ctx.from?.id;
    const fallback = (code?: string): SupportedLanguage => {
        const norm = (code ?? "en").slice(0, 2).toLowerCase();
        if (norm === "uz" || norm === "ru" || norm === "en" || norm === "kaa") return norm;
        return "en";
    };
    if (!tgId) return fallback(ctx.from?.language_code);
    try {
        const user = await repo.findByTelegramId(tgId);
        if (user?.language && (user.language === "en" || user.language === "uz" || user.language === "ru" || user.language === "kaa")) {
            return user.language as SupportedLanguage;
        }
        return fallback(ctx.from?.language_code);
    } catch {
        return fallback(ctx.from?.language_code);
    }
}

// Middleware to add i18n to context
export function i18nMiddleware() {
    return async (ctx: Context, next: () => Promise<void>) => {
        const initialLang = await getUserLanguage(ctx);
        const i18n = I18nService.getInstance();
        let currentLang: SupportedLanguage = initialLang;

        (ctx as I18nContext).i18n = {
            t: (key: string, params?: Record<string, string | number>) => i18n.t(currentLang, key, params),
            getLanguage: () => currentLang,
            setLanguage: (lang: SupportedLanguage) => { currentLang = lang; }
        };

        await next();
    };
}
